OBs-own
[
  OID
  frent ;rent of capacity 
  initial-capacity ;initial capacity
  capacity; remaining capacity
  long ;longitude 
  lat ;latitude
  attractiveness ;attractiveness of office building
  frent-max ;The maximum value that rent can rise to
  frent-min ;The minimum value that rent can fall to
  district
]

;cfrents are used to record the utility of candidate office building
cfrents-own
[
  Lrent ;utility of rent
  Laccessibility ;utility of accessibility
  Lagglomeration ;utility of agglomeration
  Ulocation ;total utility of the candidate office building
]

firms-own
[
  FID  ;ID of firm
  Age ;age of firm

  Capacity ;capacity of firm
  staff ;the actual staff in the firm 
  closure ;for how many years the firm's growth rate of capacity is lower than the closure threshold

  office-size ;Number of workstations
  office-cost ;Office rent for this year
  office-cost-last ;office rent of last year
  office-cost-next ;office rent of next year
  agg ;agglomeration
  agg-last ;agglomeration last year
  acc ;accessibility
  acc-last ;accessibility last year

  location-choice ;Should the company move to another office building
  Long  ;longitude
  Lat  ;latitude
  district
  UMove ;Utility of move to another office building. If Umove greater than a threshold, the firm will move. 
]

to firm-model
  ask firms
  [
    if count in-employee-neighbors = 0 [die]
    ;update office cost
    set office-cost-last office-cost
    set office-cost office-cost-next
    
    ;update agglomeration
    set agg-last agg
    set agg sum [count in-employee-neighbors] of other firms in-radius 2.5
    if agg = 0 [set agg 1] ;To avoid the occurrence of dividing by 0
    
    ;update accessibility (in this case, accessibility is the distance between residential location 
    set acc-last acc
    ask in-employee-neighbors [set current-ws-dis distance myself]
    set acc sum [current-ws-dis] of in-employee-neighbors / count in-employee-neighbors
  ]
  
  ;Set the upper and lower limits for OBs to rise and fall
  ask OBs
  [
    set frent-max frent + frent * T-OB-increase
    set frent-min frent - frent * T-OB-decrease
    set capacity initial-capacity - sum [office-size] of in-rent-neighbors
  ]
  
  
  firm-birth
  
  firm-growth-closure
  
  firm-move
  ask firms [set office-cost-next [frent] of one-of in-rent-neighbors * office-size]
  ask firms [set district [pdistrict] of patch-here]
  
  print "firm-model finished"
end

to firm-growth-closure
  ;
  let p-random 0
  
  ask firms 
  [
    let capacity-upper round (capacity * T-growth-upper + capacity) ;set the upper limit
    let capacity-lower round (capacity * T-growth-lower + capacity) ;set the lower limit
    let capacity-closure round (capacity * T-closure * T-growth-lower + capacity) ;the threshold of firm closure
    
    ;update capacity
    set capacity round (exp (W-growth-size * ln capacity + W-growth-sizesq * ln capacity * ln capacity + W-growth-age * age + W-growth-acc * acc + p-random))
    ;Control the updated capacity within the upper and lower limits
    (ifelse 
      capacity > capacity-upper [set capacity capacity-upper]
      capacity < capacity-lower [set capacity capacity-lower]
      [set capacity capacity]
    )
    ;Check if capacity is below the threshold for closure
    ifelse capacity < capacity-closure [set closure closure + 1][set closure 0]
  ]
  
  ;firm closure
  ask firms with [closure = 3]  ;If the capacity is less than capacity closure for 3 consecutive years, or if the number of employees is 0, the firm will close
  [
    ask in-employee-neighbors
    [
      ask my-employees [die]
    ]

    ;update the capacity of office building
    ask in-rent-neighbors
    [
      set capacity capacity + [office-size] of myself
    ]
    die
  ]
  
  ask firms
  [
    set capacity round ((capacity / sum [capacity] of firms) * sum [count in-employee-neighbors] of firms)
  ]
end

to firm-birth
  ;There are two types of new firms: (1) start-ups; (2)branches of existing firms
  
  ;branches of existing firms
  let R-exist 0.005 ;the proportion of exist firms will establish branches
  create-firms int (R-exist * count firms)
  [
    set fid max [fid] of firms + 1
    set age 1
    set location-choice 1
    let parent-firm one-of firms with [count in-employee-neighbors >= 2]
    let n1 0
    ask parent-firm [set n1 count in-employee-neighbors]
    set capacity random n1 + 1
    ask n-of capacity people with [employee-neighbor? parent-firm]
    [
      ask my-employees [die]
      ask my-shoppings with [loc = 1] [die]
      ask my-leisures with [loc = 1] [die]
      create-employee-with myself
    ]
  ]
  
  ;set-ups
  let r-new 0.005
  set labor-current count people with [status = 2 or status = 3]
  if labor-current > labor-lastyear
  [
    create-firms int (r-new * (labor-current - labor-lastyear))
    [
      set fid max [fid] of firms + 1
      set capacity random 10 + 1           
      set age 1
      set location-choice 1
    ]
  ]
  
  ;
  ask firms with [age = 1]
  [
    set acc mean [acc] of firms with [age != 1]
    set acc-last mean [acc-last] of firms with [age != 1]
    set agg mean [acc] of firms with [age != 1]
    set acc-last mean [acc-last] of firms with [age != 1]
    set office-cost mean [office-cost] of firms with [age != 1]
    set office-cost-last mean [office-cost-last] of firms with [age != 1]
  ]
end

to firm-move
  ;There are two steps in this fuction: 1) determine whether firms will move; 2) determine where to move
  
  ;Step 1: determine whether firms will move
  let m-random 1
  ask firms with [location-choice = 0]
  [
    ;calculate utility of rent, accessibility, agglomeration, space
    let Mrent (office-cost / office-cost-last) / (mean [office-cost] of firms / mean [office-cost-last] of firms) - 1
    let Macc (acc / acc-last) / (mean [acc] of firms / mean [acc-last] of firms) - 1
    let Magg (agg / agg-last) / (mean [agg] of firms / mean [agg-last] of firms) - 1
    let Mspace abs (capacity - office-size) / office-size
    
    ;calculate the total utility
    set Umove W-move-rent * Mrent + W-move-acc * Macc + W-move-agg * Magg + W-move-space * Mspace + m-random
    
    ;if the utility of move is greater than the threshold of move, the firm will move to another office building in this simulation year,
    if Umove > T-firm-move [set location-choice 1]
  ]
  print (word "mean Umove:" mean [umove] of firms)
  
  print (word "number of firms move:" count firms with [location-choice = 1])
  
  ;mock negotiation
  let i 1 
  let max-num-OBs 5 ;this variable determines in each negotiation, the maximum number of office building a firm can simultaneously take them as candidates.
  while [i <= 5] ;negotiation will repeat 5 times (the time can be adjusted)
  [
    set i i + 1
    print i
    ;ask firms to find take candidate office buildings with capacity greater than capacity of theirselves as candidates, and calculate utility of candidates
    ask firms with [location-choice = 1]
    [
      if count in-cfrent-neighbors < max-num-OBs and count OBs with [capacity > [capacity] of myself] > 0
      [
        let leaser-employees in-employee-neighbors
        let candidate1 up-to-n-of (max-num-OBs - count in-cfrent-neighbors) OBs with [capacity > [capacity] of myself]
        create-cfrents-with candidate1 
        ask my-cfrents with [other-end = candidate1]
        [
          ;utility of rent
          set Lrent [frent] of candidate1 / mean [frent] of OBs - 1
          ;calculate accessibility
          ask leaser-employees [set candidate-ws-dis distance candidate1] ;ask employees records the distance between the employees and the candidate office building
          set Laccessibility sum [candidate-ws-dis] of leaser-employees / count leaser-employees / mean [acc] of firms - 1 ;
          ;calculate utility of agglomeration
          let Uagg 0
          ask candidate1 [set Uagg sum [count in-employee-neighbors] of in-rent-neighbors]
          set Lagglomeration Uagg / mean [agg] of firms - 1
          ;calculate utility
          set Ulocation W-firm-loc-rent * Lrent + W-firm-loc-acc * Laccessibility + W-firm-loc-agg * Lagglomeration
        ]
      ]
    ]
    
    ;Office buildings update attractiveness and rents
    let T-lower 0.5 ;The variable determines a lower limit. If office buildings' attractiveness is lower than the lower limit, they will reduce the rent.
    let T-upper 1 ;The variable determines a upper limit. If office buildings' attractiveness is greater than the lower limit, they will reduce the rent.
    let R-increase 0.015 ;increase rate
    let R-decrease -0.01 ;decrease rate

    ask OBs [set attractiveness 0]
    ask OBs with [capacity > 0]
    [
      set attractiveness sum [capacity] of in-cfrent-neighbors / capacity
      (ifelse 
        attractiveness > T-upper 
        [
          ;update rent
          set frent frent + R-increase * (attractiveness - T-upper) * frent
          if frent > frent-max [set frent frent-max]
          ;update utility
          ask my-cfrents [set Lrent [frent] of myself / mean [frent] of OBs set Ulocation W-firm-loc-rent * Lrent + W-firm-loc-acc * Laccessibility + W-firm-loc-agg * Lagglomeration]
        ]
        attractiveness < T-lower 
        [
          ;update rent
          set frent frent + R-decrease * (T-lower - attractiveness) * frent
          if frent < frent-min [set frent frent-min]
          ;update utility
          ask my-cfrents [set Lrent [1 / frent] of myself / mean [frent] of OBs set Ulocation W-firm-loc-rent * Lrent + W-firm-loc-acc * Laccessibility + W-firm-loc-agg * Lagglomeration ]
        ]
        [set frent frent]
      )
    ]
    
    ;export attractiveness
;    let file-name-att (word "Output Data/Annualoutput/ob rent att" year "round" i ".csv")
;    file-open file-name-att
;    file-print "OID,att"
;    ask OBs with [capacity > 0]
;    [
;      file-print (word who ", "attractiveness)
;    ]
;    file-close
  ]
  
  ;simulate transaction after 5 times negotiation
  while [count firms with [location-choice = 1 and count in-cfrent-neighbors > 0] > 0]
  [
    ask max-one-of firms with [location-choice = 1 and count in-cfrent-neighbors > 0] [capacity] ;
    [
      set location-choice 0
      ask my-rents [die]
      let my-staff employee-neighbors
      let target-cfrent max-one-of my-cfrents [Ulocation]
      let target nobody
      ask target-cfrent [set target other-end]
      ask my-cfrents [die]
      create-rent-with target
      set long [long] of target
      set lat [lat] of target
      set office-size capacity
      set office-cost-next capacity * [frent] of target
      move-to target
      ask target 
      [
        ;update capacity
        set capacity capacity - [capacity] of myself
        ;check whether the capacity is enough for firms who take this office building as a candidate. If the capacity is less than those firms' capacity, this office building will not be taken as a candidate by those firms.
        ask my-cfrents with [[capacity] of other-end < [capacity] of myself] [die]
      ]
      ;employees update their location of work place and the distance between home and work place
      ask my-staff 
      [
        set wslong [long] of myself
        set wslat [lat] of myself
        set current-ws-dis distance myself
        ask one-of people with [hhd = [hhd] of myself and relationship = 1][set flexible flexible + 1 set work work + 1]
      ]
    ]
  ]
  
  ;For firms do not find a proper office building to settle, they will 
  ask firms with [location-choice = 1]
  [
    let target nobody
    ifelse count OBs with [capacity >= [capacity] of myself] = 0 
    [set target max-one-of OBs [capacity]]
    [set target min-one-of OBs with [capacity >= [capacity] of myself] [frent]]
    set location-choice 0
    ask my-rents [die]
    let my-staff employee-neighbors
    create-rent-with target
    set long [long] of target
    set lat [lat] of target
    ifelse [capacity] of target > capacity [set office-size capacity][set office-size [capacity] of target]
    set office-cost-next office-size * [frent] of target
    move-to target
    ask target 
    [
      ;update capacity
      set capacity capacity - [office-size] of myself
    ]
    ask my-staff 
    [
      set wslong [long] of myself
      set wslat [lat] of myself
      set current-ws-dis distance myself
      ask one-of people with [hhd = [hhd] of myself and relationship = 1][set flexible flexible + 1 set work work + 1]
    ]
  ]
end

to develop-new-OB
  ;This function is used to mock goverment/real estate developers will build new office buildings on high demand patches.
  ;update demand
  ask patches with [pdistrict != 0 and count turtles-here = 0]
  [
    let my-neighbors neighbors with [pdistrict != 0]
    if my-neighbors != nobody
    [
      set dem-ob sum [frent] of residences-on my-neighbors / count my-neighbors
    ]
  ]
  
  
  
  ;Find the N patches with the highest demand, and mark them
  ask max-n-of 1 patches [dem-ob][set pcolor blue]
  
  
  ;create N new office buildings
  create-OBs 1
  [
    set initial-capacity 120 ;assuming that the capacity of each new residence is 120
    set capacity initial-capacity
    move-to one-of patches with [pcolor = blue]
    ask patch-here [set pcolor 0]
    set frent mean [frent] of min-n-of 10 obs [distance myself]
    set size 0.5 set color green set shape "blue"
  ]
  
  ;Calculate longitude and latitude based on netlogo coordinates
  let long1 []
  let lat1 []
  let xcor1 []
  let ycor1 []
  ask OBs with [long != 0 and lat != 0]
  [
    set xcor1 lput xcor xcor1
    set ycor1 lput ycor ycor1
    set long1 lput long long1
    set lat1 lput lat lat1
  ]
  py:set "xcor1" xcor1
  py:set "ycor1" ycor1
  py:Set "long1" long1
  py:set "lat1" lat1  
  ask OBs with [long = 0 and lat = 0]
  [
    py:set "xcor2" xcor
    py:Set "ycor2" ycor
    (py:run
      "import numpy as np"
      "from scipy.optimize import curve_fit"
      "import pandas as pd"
      "def polynomial_function(x, a, b, c, d):"
      " return a * x**3 + b * x**2 + c * x + d"
      
      "params_x, _ = curve_fit(polynomial_function, xcor1, long1)"
      "params_y, _ = curve_fit(polynomial_function, ycor1, lat1)"
      "long2 = polynomial_function(xcor2, *params_x)"
      "lat2 = polynomial_function(ycor2, *params_y)"
   )
    set long py:runresult "long2"
    set lat py:runresult "lat2"
  ]
end


