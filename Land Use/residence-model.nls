residences-own
[
  rid ;residential building ID
  capacity  ;remaining capacity (how many people can move in)
  initial-capacity ;initial capacity
  purchasing ;purchasing per unit
  Rrent ;rent per unit
  purchaser-income ;average income of purchasers in this residential building
  renter-income ;average income of renters in this residential building
  long  ;longitude
  lat  ;latitude
  att-purchase ;attractiveness to candidate purchasers
  att-rent ;attractiveness to candidate renters
  surrounding-purchase ;purchasings of residential residences within N km
  surrounding-rent ;rents of residential residences within N km
  district
]

;cpurchases are used to temporarily record 
cpurchases-own
[
  total-utility ;total utility
  accessibility ;utility of accessibility
  cost ;cost utility
  acc-u
  cost-u
]

crents-own
[
  total-utility
  acc-u
  cost-u
  accessibility
  cost
]


to residence-model
  ask residences 
  [
    ;Calculate the average purchasing and rent of houses in the surrounding N km (tentatively N is 2)
    set surrounding-purchase mean [purchasing] of residences in-radius 5
    set surrounding-rent mean [rrent] of residences in-radius 5
    
    ;update avearge income of purchasers and renters
    ifelse count in-purchase-neighbors > 0 [set purchaser-income sum [hhd-income] of in-purchase-neighbors / sum [number] of in-purchase-neighbors] [set purchaser-income 0]
    ifelse count in-rent-neighbors > 0 [set renter-income sum [hhd-income] of in-rent-neighbors / sum [number] of in-rent-neighbors][set renter-income 0]
    
    ;update capacity
    set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors
    
    if capacity = 0 [set color black] ;this is to mark these residential building with no capacity, and then update their rents and purchasings with their surrouding residential building
  ]  
  
  ask crents [die]
  ask cpurchases [die]
  
  ;update the utility of current living residential building, including three steps: 1) updating the cost; 2) update the accessibility; 3) update the utility
  ask people with [relationship = 1 and (count in-rent-neighbors = 1 or count in-purchase-neighbors = 1)]
  [
    ;step 1: update the cost. Only renters.
    if count in-rent-neighbors = 1 ;
    [set residence-cost [Rrent] of one-of in-rent-neighbors * residence-size]
    
    ;step 2: update the accessibility
    ask people with [hhd = [hhd] of myself]
    [
      ifelse wslong = 0 and wslat = 0 ;for people who do not need to go to work or go school, their current-ws-dis will be set to 0; otherwise, will be set to the distance between the current residential building and the work/study place
      [set current-ws-dis 0]
      [
        ifelse status = 1 
        [set current-ws-dis distance one-of in-student-neighbors] 
        [set current-ws-dis distance one-of in-employee-neighbors] 
      ]
    ]
    
    set current-accessibility sum [current-ws-dis] of people with [hhd = [hhd] of myself]
    if current-accessibility = 0 [set current-accessibility 1]
  ]
  
  ;Allocate cost and accessibility for these people do not have a living place yet (due to immigration, marriage, and divorce). In this case, average cost and accessibility are allocated.
  ask people with [relationship = 1 and count in-rent-neighbors = 0 and count in-purchase-neighbors = 0]
  [
    set residence-cost mean [residence-cost] of people with [relationship = 1 and (count in-rent-neighbors = 1 or count in-purchase-neighbors = 1)]
    set current-accessibility mean [current-accessibility] of people with [relationship = 1 and (count in-rent-neighbors = 1 or count in-purchase-neighbors = 1)]
  ]
  
  ask people [set move 0]
  
  ask people with [relationship = 1 and mandatory = 1][set move 1]
  ask people with [relationship = 1 and count in-rent-neighbors = 1 and mandatory = 0 and flexible >= T-flexible-rent][set move 1]
  ask people with [relationship = 1 and count in-purchase-neighbors = 1 and mandatory = 0 and flexible >= T-flexible-purchase][set move 1]
  
  ;developing new residential buildings
  develop-new-residences
  
  let move-detail (word "Output Data/Annualoutput/move-detail" year ".csv")
  file-open move-detail
  file-print "HID,Long1,Lat1,Long2,Lat2,marriage,divorce,birth,death,work,study,immigration"
  
  ;simulate people purchase residential building
  purchasing-residence
  
  ;simute people rent residential building
  rent-residence
  
  
  
  ;for those people who do not purchase or rent a proper residential building in the last procedures, they will rent a residential building with the lowest rent.
  mandatory-residence-renter
  file-close-all
  
  ;for residential building with no capacity to enter the housing market, their purchasings and rents will change with the surrounding residential buildings
  ask residences with [color = black]
  [
    let purchase1 mean [purchasing] of residences in-radius 5
    set purchasing round (purchasing * (purchase1 / surrounding-purchase))
    let rent1 mean [rrent] of residences in-radius 5
    set rrent round (rrent * (rent1 / surrounding-rent))
  ]
  
  ;Updating people's districts
  ask people [set district [pdistrict] of patch-here]
  
  ask people with [relationship = 1 and count in-purchase-neighbors = 1][set livelong [long] of one-of in-purchase-neighbors set livelat [lat] of one-of in-purchase-neighbors]
  ask people with [relationship = 1 and count in-purchase-neighbors = 0][set livelong [long] of one-of in-rent-neighbors set livelat [lat] of one-of in-rent-neighbors]
  ask people with [relationship != 1][set livelong [livelong] of one-of people with [relationship = 1 and hhd = [hhd] of myself] set livelat [livelat] of one-of people with [relationship = 1 and hhd = [hhd] of myself]]
  
  print "residence-model finished"
end

to purchasing-residence  
  ;This fuction is used to simulate people purchase residential building, including 5 steps: 1) people seek suitable residential buildings as candidates and calculate the utility; 2) residential buildings update their purchasing and people recalculate the utility; 
  ;3) people move residential buildings with utility below a certain value out of candidates; 4) repeat the three steps above for N times; 5) People choose the candidate with the highest utility for their transactions
  let i 1
  while [i <= 5] ;5 times negotiation
  [
    set i i + 1
    
    ;in each negotiation, if the number of candidates is below than the variable 'max-num-residences', people will seek for some new candidates
    ask people with [relationship = 1 and move = 1 and count in-cpurchase-neighbors < max-num-residences]
    [
      if count residences with [capacity >= [number] of myself and purchaser-income * T-purchase-afford <= ([hhd-income] of myself / [number] of myself)] > 0
      [
        let hhd1 hhd
        ask up-to-n-of (max-num-residences - count in-cpurchase-neighbors) residences with [capacity >= [number] of myself and purchaser-income * T-purchase-afford <= ([hhd-income] of myself / [number] of myself)]
        [
          let purchaser myself
          create-cpurchase-with purchaser
          ;calculate utility of candidates
          ask one-of my-cpurchases with [other-end = purchaser]
          [
            let candidate myself
            set cost [purchasing] of candidate * [number] of purchaser ;utility of cost
            
            ;calcualet utility of accessibility
            ask people with [hhd = hhd1]
            [
              ifelse wslong = 0 and wslat = 0
              ;family members who do not need to go to school or work will set variabel 'candidate-ws-dis' at 0
              [set candidate-ws-dis 0]
              ;otherwise, set 'candidate-ws-dis' at the distance between work/study place and the candidate
              [
                let wsplace 0
                ifelse status = 1 [set wsplace one-of in-student-neighbors] [set wsplace one-of in-employee-neighbors]
                let distance1 0
                ask wsplace [set distance1 distance candidate]
                set candidate-ws-dis distance1
              ]
            ]
            set accessibility sum [candidate-ws-dis] of people with [hhd = hhd1] ;utility of accessibility
            if accessibility = 0 [set accessibility 1]
            
            ;calcuate the utility
            ;accessibility
            ;Calculate the difference between the accessibility of the current house and the accessibility of the candidate
            ifelse accessibility > [current-accessibility] of purchaser [set acc-u (- (accessibility / [current-accessibility] of purchaser))][set acc-u [current-accessibility] of purchaser / accessibility]
            ;cost utility
            ifelse [count in-purchase-neighbors] of purchaser = 1
            [
              ifelse cost > [residence-cost] of purchaser [set cost-u ( - cost / [residence-cost] of purchaser)][set cost-u [residence-cost] of purchaser / cost]
            ]
            [
              ;the purchaser is renting, therefore the model
              ifelse cost > mean [purchasing] of residences * [number] of purchaser [set cost-u (- cost /  mean [purchasing] of residences * [number] of purchaser)][set cost-u mean [purchasing] of residences * [number] of purchaser / cost]
            ]
          ]
        ]
      ]
    ]

    ask cpurchases 
    [
      ifelse acc-u > 0 [set total-utility w-res-purchase-acc * acc-u][set total-utility w-res-purchase-acc * loss * acc-u]
      ifelse cost-u > 0 [set total-utility total-utility + cost-u * w-res-purchase-price][set total-utility (total-utility + loss * w-res-purchase-price * cost-u)]
      if total-utility <= purchase-prospect [die]
    ]
    
    print (word "mean utility:" mean [total-utility] of cpurchases)
    print (word "mean cost:" mean [cost-u] of cpurchases)
    print (word "mean accessibility:" mean [acc-u] of cpurchases)
      
    ;residential building update purchasing
    ask residences [set att-purchase 0]
    let T-rise-purchase 0.01 ;This determine a threshold of rising the purchasing, which means if a residential building's 'att-purchase' is greater than 100, its purchasing will rise
    let T-decrease-purchase 0.005 ;This determine a threshold of decreasing the purchasing, which means if a residential building's 'att-purchase' is below -200, its purchasing will rise

    ask residences with [capacity > 0][set att-purchase sum [total-utility] of my-cpurchases / capacity]
    
    ;export 'att-purchase' of each residence with capacity greater than 0
    ;if you want to know 
;    let file-name-att (word "Output Data/Annualoutput/residence purchase att" year "round" i ".csv")
;    file-open file-name-att
;    file-print "RID,att-purchase"
;
;    ask residences with [capacity > 0]
;    [
;      file-print (word who ", "att-purchase)
;    ]
;    file-close
    
    
    ask residences with [capacity > 0]
    [
      
      if Att-purchase > T-rise-purchase  ;simulate rising of purchasing
      [
        set purchasing round (purchasing * 1.02) ;update purchasing. You can control the rising by adjust the number.
        ;update utility
        ask my-cpurchases
        [
          let purchaser other-end
          set cost [purchasing] of myself * [number] of purchaser
          ifelse [count in-purchase-neighbors] of purchaser = 1
          [
            ifelse cost > [residence-cost] of purchaser [set cost-u ( - cost / [residence-cost] of purchaser)][set cost-u [residence-cost] of purchaser / cost]
          ]
          [
            ;the purchaser is renting, therefore the model
            ifelse cost > mean [purchasing] of residences * [number] of purchaser [set cost-u (- cost /  mean [purchasing] of residences * [number] of purchaser)][set cost-u mean [purchasing] of residences * [number] of purchaser / cost]
          ]
          set total-utility 0
          ifelse acc-u > 0 [set total-utility w-res-purchase-acc * acc-u][set total-utility w-res-purchase-acc * loss * acc-u]
          ifelse cost-u > 0 [set total-utility total-utility + cost-u * w-res-purchase-price][set total-utility (total-utility + loss * w-res-purchase-price * cost-u)] 
        ]
      ]
      if Att-purchase < T-decrease-purchase  ;simulate decreasing of purchasing
      [
        set purchasing round (purchasing * 0.99) ;update the purchasing. You can control the rising by adjust the number.
        ;update utility
        ask my-cpurchases
        [
          let purchaser other-end
          set cost [purchasing] of myself * [number] of purchaser
          ifelse [count in-purchase-neighbors] of purchaser = 1
          [
            ifelse cost > [residence-cost] of purchaser [set cost-u ( - cost / [residence-cost] of purchaser)][set cost-u [residence-cost] of purchaser / cost]
          ]
          [
            ;the purchaser is renting, therefore the model
            ifelse cost > mean [purchasing] of residences * [number] of purchaser [set cost-u (- cost /  mean [purchasing] of residences * [number] of purchaser)][set cost-u mean [purchasing] of residences * [number] of purchaser / cost]
          ]
          set total-utility 0
          ifelse acc-u > 0 [set total-utility w-res-purchase-acc * acc-u][set total-utility w-res-purchase-acc * loss * acc-u]
          ifelse cost-u > 0 [set total-utility total-utility + cost-u * w-res-purchase-price][set total-utility (total-utility + loss * w-res-purchase-price * cost-u)] 
        ]
      ]
    ]
    
    ;if utility of a residential building is lower than the 'purchase-propsect', it will be removed from the candidates
    ask cpurchases with [total-utility <= purchase-prospect] [die]
  ]
  
  ;after 5 times of negotiation, this model will prior choose households with mandatory trigger to purchase residential building
  while [count people with [mandatory = 1 and move = 1 and count in-cpurchase-neighbors > 0] > 0]
  [
    ask one-of people with [mandatory = 1 and move = 1 and count in-cpurchase-neighbors > 0]
    [
      if count in-cpurchase-neighbors > 0
      [
        ;break the connection with the current living residential building
        ifelse count in-purchase-neighbors = 1 
        [ask my-purchases [die] set fre-cook 0]
        [ask my-rents [die] set LED [] set air [] set fre-cook 0]
        
        ;purchasing candidates with the highest utility 
        let target-cpurchase max-one-of my-cpurchases [total-utility] ;record the candidates with the highest utility as 'task'
        let target nobody
        ask target-cpurchase [set target other-end]
        create-purchase-with target ;create a 'purchase (link)' between the target and purchaser, meaning purchaser has purchased the residential building
        ask my-cpurchases [die] ;clear all candidates
        set residence-cost [purchasing] of target * number ;record the cost of the new residential building
        set residence-size number ;update residence size
        set mandatory 0 set flexible 0 set move 0;Transaction completed successfully, triggers becomes 0
        set transaction-purchase transaction-purchase + 1
        file-print (word hhd "," livelong "," livelat "," [long] of target "," [lat] of target "," marriage "," divorce "," birth "," death "," work "," study "," immigration)
        set marriage 0
        set divorce 0
        set birth 0
        set death 0
        set work 0
        set study 0
        set immigration 0
        
        ;housing move
        ask people with [hhd = [hhd] of myself]
        [
          set livelong [long] of target
          set livelat [lat] of target
          move-to target
          ;clear shopping and leisuring activities occurs around previous residential location
          ask my-shoppings with [loc = 2][die]
          ask my-leisures with [loc = 2][die]
        ]
        
        ;residential buildings update their capacity.
        ask residences 
        [
          set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors
          ask my-cpurchases with [[capacity] of myself < [number] of other-end][die] ;if capacity of a residential building is lower than the number of family members of a purchaser, it will be removed from the candidates by the purchaser
        ]
      ]
    ]
  ]
    
  ;simulate transaction of households with flexible triggers
  while [count people with [count in-cpurchase-neighbors > 0] > 0]
  [
    ask one-of people with  [count in-cpurchase-neighbors > 0]
    [
      if count in-cpurchase-neighbors > 0
      [
        ;break the connection with the current living residential building
        ifelse count in-purchase-neighbors = 1 
        [ask my-purchases [die] set fre-cook 0]
        [ask my-rents [die] set LED [] set air [] set fre-cook 0]
        
        ;to purchase candidates with the highest utility 
        let target-cpurchase max-one-of my-cpurchases [total-utility]
        let target nobody
        ask target-cpurchase [set target other-end]
        create-purchase-with target
        ask my-cpurchases [die] 
        set residence-cost [purchasing] of target * number 
        set residence-size number 
        set mandatory 0 set flexible 0 set move 0 
        set transaction-purchase transaction-purchase + 1
        file-print (word hhd "," livelong "," livelat "," [long] of target "," [lat] of target "," marriage "," divorce "," birth "," death "," work ","study "," immigration)
        set marriage 0
        set divorce 0
        set birth 0
        set death 0
        set work 0
        set study 0
        set immigration 0
        
        ;housing move 
        ask people with [hhd = [hhd] of myself]
        [
          set livelong [long] of target
          set livelat [lat] of target
          move-to target
          ask my-shoppings with [loc = 2][die]
          ask my-leisures with [loc = 2][die]
        ]
        
        ;residential buildings update their capacity.
        ask residences 
        [
          set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors
          ask my-cpurchases with [[capacity] of myself < [number] of other-end][die];if capacity of a residential building is lower than the number of family members of a purchaser, it will be removed from the candidates by the purchaser
        ]
      ]
    ]
  ]
  
  ask cpurchases [die]
  print "purchase finished"
end

to rent-residence
  ;This fuction is used to simulate households rent residential building, the steps are the same as purcahsing 
  let i 1
  while [i <= 5] ;5 times negotiation
  [
    set i i + 1
    ask people with [move = 1 and  count in-crent-neighbors < max-num-residences]
    [
      if count in-crent-neighbors < max-num-residences and count residences with [capacity >= [number] of myself and renter-income * T-rent-afford <= ([hhd-income] of myself / [number] of myself)] > 0
      [
        let hhd1 hhd
        ask up-to-n-of (max-num-residences - count in-crent-neighbors) residences with [capacity >= [number] of myself and renter-income * T-rent-afford <= ([hhd-income] of myself / [number] of myself)]
        [
          let renter myself
          create-crent-with renter
          ;calculate utility of candidates
          ask one-of my-crents with [other-end = renter]
          [
            let candidate myself
            set cost [rrent] of candidate * [number] of renter ;utility of cost
            
            ;calcualet utility of accessibility
            ask people with [hhd = hhd1]
            [
              ifelse wslong = 0 and wslat = 0
              ;family members who do not need to go to school or work will set variabel 'candidate-ws-dis' at 0
              [set candidate-ws-dis 0]
              ;otherwise, set 'candidate-ws-dis' at the distance between work/study place and the candidate
              [
                let wsplace 0
                ifelse status = 1 [set wsplace one-of in-student-neighbors] [set wsplace one-of in-employee-neighbors]
                let distance1 0
                ask wsplace [set distance1 distance candidate]
                set candidate-ws-dis distance1
              ]
              set candidate-ws-dis distance candidate
            ]
            set accessibility sum [candidate-ws-dis] of people with [hhd = hhd1] ;utility of accessibility
            if accessibility = 0 [set accessibility 1]
            
            ;calcuate the utility
            ;accessibility
            ;Calculate the difference between the accessibility of the current house and the accessibility of the candidate
            ifelse accessibility > [current-accessibility] of renter [set acc-u (- (accessibility / [current-accessibility] of renter))][set acc-u [current-accessibility] of renter / accessibility]
            ;cost
            ifelse [count in-rent-neighbors] of renter = 1
            [
              ifelse cost > [residence-cost] of renter [set cost-u ( - cost / [residence-cost] of renter)][set cost-u [residence-cost] of renter / cost]
            ]
            [
              ;the purchaser is renting, therefore the model
              ifelse cost > mean [rrent] of residences * [number] of renter [set cost-u (- cost /  mean [rrent] of residences * [number] of renter)][set cost-u mean [rrent] of residences * [number] of renter / cost]
            ]
          ]
        ]
      ]
    ]
    
     ask crents 
    [
      ifelse acc-u > 0 [set total-utility w-res-rent-acc * acc-u][set total-utility w-res-rent-acc * loss * acc-u]
      ifelse cost-u > 0 [set total-utility total-utility + cost-u * w-res-rent-price][set total-utility (total-utility + loss * w-res-rent-price * cost-u)]
      if total-utility <= rent-prospect [die]
    ]

    
    ;residential buildings update rent
    ask residences [set att-rent 0]
    let T-rise-rent 0 ;This determine a threshold of rising the rent
    let T-decrease-rent -200 ;This determine a threshold of decreasing the rent
    
    ask residences with [capacity > 0][set att-rent sum [total-utility] of my-crents / capacity]
    ;export 'att-rent'
;    let file-name-att (word "Output Data/Annualoutput/residence rent att" year "round" i ".csv")
;    file-open file-name-att
;    file-print "RID,att-rent"
;    ask residences with [capacity > 0]
;    [
;      file-print (word who ", "att-rent)
;    ]
;    file-close
    
    
    ask residences with [capacity > 0]
    [
      if Att-rent > T-rise-rent ; increasing rent
      [
        set Rrent Rrent * 1.02 ;updating rent
        ;update utility
        ask my-crents
        [
          let renter other-end
          set cost [Rrent] of myself * [number] of renter
          set total-utility 0
          ifelse acc-u > 0 [set total-utility w-res-rent-acc * acc-u][set total-utility w-res-rent-acc * loss * acc-u]
          ifelse cost-u > 0 [set total-utility total-utility + cost-u * w-res-rent-price][set total-utility (total-utility + loss * w-res-rent-price * cost-u)]
        ]
      ]
      if att-rent < T-decrease-rent
      [
        set Rrent Rrent * 0.97 ;decreasing rent
        ask my-crents
        [
          let renter other-end
          set cost [Rrent] of myself * [number] of renter
          set total-utility 0
          ifelse acc-u > 0 [set total-utility w-res-rent-acc * acc-u][set total-utility w-res-rent-acc * loss * acc-u]
          ifelse cost-u > 0 [set total-utility total-utility + cost-u * w-res-rent-price][set total-utility (total-utility + loss * w-res-rent-price * cost-u)]
        ]   
      ]
    ]
    
    ;if utility of a residential building is lower than the 'rent-propsect', it will be removed from the candidates
    ask crents with [total-utility <= rent-prospect] [die]
  ]
  
  ;after 5 times of negotiation, this model will prior choose households with mandatory trigger to rent residential building
  while [count people with [mandatory = 1 and count in-crent-neighbors > 0] > 0]
  [
    ask one-of people with [mandatory = 1 and count in-crent-neighbors > 0]
    [ 
      if count in-crent-neighbors > 0
      [
        ;;break the connection with the current living residential building
        ask my-purchases [die]
        ask my-rents [die]
        set air []
        set LED []
        set fre-cook 0
        
        ;to rent candidates with the highest utility 
        let target-crent max-one-of my-crents [total-utility]
        let target nobody
        ask target-crent [set target other-end]
        create-rent-with target
        ask my-crents [die] 
        set residence-cost [Rrent] of target * number 
        set residence-size number 
        set mandatory 0 set flexible 0 set move 0 
        set transaction-rent transaction-rent + 1
        file-print (word hhd "," livelong "," livelat "," [long] of target "," [lat] of target "," marriage "," divorce "," birth "," death "," work "," study "," immigration)
        set marriage 0
        set divorce 0
        set birth 0
        set death 0
        set work 0
        set study 0
        set immigration 0
        
        
        ;house moving 
        ask people with [hhd = [hhd] of myself]
        [
          set livelong [long] of target
          set livelat [lat] of target
          move-to target
          ask my-shoppings with [loc = 2][die]
          ask my-leisures with [loc = 2][die]
        ]
        
        ;;residential buildings update their capacity
        ask residences 
        [
          set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors
          ask my-crents with [[capacity] of myself < [number] of other-end][die]
        ]
        
      ]
    ]
  ]
 
  ;simulate transaction of households with flexible triggers
  while [count people with [count in-crent-neighbors > 0] > 0]
  [
    ask one-of people with [count in-crent-neighbors > 0]
    [ 
      if count in-crent-neighbors > 0
      [
        ;break the connection with the current living residential building
        ask my-purchases [die]
        ask my-rents [die]
        set air []
        set LED []
        set fre-cook 0
        
        ;to rent candidates with the highest utility 
        let target-crent max-one-of my-crents [total-utility]
        let target nobody
        ask target-crent [set target other-end]
        create-rent-with target
        ask my-crents [die] ;所有candidate rent link清空
        set residence-cost [Rrent] of target * number ;更新residence cost
        set residence-size number ;更新residence size
        set mandatory 0 set flexible 0 set move 0 ;已完成location choice，trigger清零
        set transaction-rent transaction-rent + 1
        file-print (word hhd "," livelong "," livelat "," [long] of target "," [lat] of target "," marriage "," divorce "," birth "," death "," work "," study "," immigration)
        set marriage 0
        set divorce 0
        set birth 0
        set death 0
        set work 0
        set study 0
        set immigration 0
      
        ;house moving 
        ask people with [hhd = [hhd] of myself]
        [
          set livelong [long] of target
          set livelat [lat] of target
          move-to target
          ask my-shoppings with [loc = 2][die]
          ask my-leisures with [loc = 2][die]
        ]
        
        ;residential buildings update their capacity
        ask residences 
        [
          set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors
          ask my-crents with [[capacity] of myself < [number] of other-end][die]
        ]
      ]
    ]
  ]
  
  ask crents [die]
  print "rent finished"
end

to mandatory-residence-renter
  ask residences [set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors]
  ;If no suitable building is found in above purchasing or renting behviors, household with mandatory trigger will rent the building with the lowest rent on the market.
  ask people with [move = 1 and relationship = 1]
  [
    ask my-purchases [die] ask my-rents [die]
    let target min-one-of residences with [capacity >= [number] of myself] [Rrent]
    create-rent-with target
    set residence-cost [Rrent] of target * number 
    set residence-size number
    set transaction-rent transaction-rent + 1
    ask people with [hhd = [hhd] of myself]
    [
      set livelong [long] of target
      set livelat [lat] of target
      move-to target
      ask my-shoppings with [loc = 2][die]
      ask my-leisures with [loc = 2][die]
    ]
    set mandatory 0 set flexible 0 set move 0 
     file-print (word hhd "," livelong "," livelat "," [long] of target "," [lat] of target "," marriage "," divorce "," birth "," death "," work "," study "," immigration)
     set marriage 0
     set divorce 0
     set birth 0
     set death 0
     set work 0
     set study 0
     set immigration 0
    ask residences [set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors]
  ]
end

;we assume that real estate developer and the government will develop new residential building each year, on patches with high demand
to develop-new-residences
  ;calculate demand of patches with no building by purchasing of around residential buildings.
  ask patches [set dem-res 0]
  
  ifelse Tongzhou
  [
    ask patches with [pdistrict = 9 and count turtles-here = 0]
    [
      let my-neighbors neighbors with [pdistrict = 9]
      if my-neighbors != nobody
      [
        set dem-res sum [purchasing] of residences-on my-neighbors / count my-neighbors
      ]
    ]
    
    ;identify 10 patches with highest demand, and mark them by blue
    ask max-n-of 10 patches [dem-res][set pcolor blue]
    
    
    ;crate new residences
    create-residences 10 ;the number of new residential buildings
    [
      set initial-capacity 20 ;assume that the capacity of each residence is 20
      set capacity initial-capacity
      move-to one-of patches with [pcolor = blue]
      ask patch-here [set pcolor 0]
      set purchasing round (mean [purchasing] of min-n-of 10 residences [distance myself])
      set rrent round (mean [rrent] of min-n-of 10 residences [distance myself])
      set purchaser-income mean [purchaser-income] of min-n-of 10 residences [distance myself]
      set renter-income mean [renter-income] of min-n-of 10 residences [distance myself]
      set size 0.5 set color green set shape "house"
      set district [pdistrict] of patch-here
    
    ]
    
    ;calculate longitude and latitude
    let long1 []
    let lat1 []
    let xcor1 []
    let ycor1 []
    ask residences with [long != 0 and lat != 0]
    [
      set xcor1 lput xcor xcor1
      set ycor1 lput ycor ycor1
      set long1 lput long long1
      set lat1 lput lat lat1
    ]
    py:set "xcor1" xcor1
    py:set "ycor1" ycor1
    py:Set "long1" long1
    py:set "lat1" lat1  
    ask residences with [long = 0 and lat = 0]
    [
      py:set "xcor2" xcor
      py:Set "ycor2" ycor
      (py:run
        "import numpy as np"
        "from scipy.optimize import curve_fit"
        "import pandas as pd"
        "def polynomial_function(x, a, b, c, d):"
        " return a * x**3 + b * x**2 + c * x + d"
        
        "params_x, _ = curve_fit(polynomial_function, xcor1, long1)"
        "params_y, _ = curve_fit(polynomial_function, ycor1, lat1)"
        "long2 = polynomial_function(xcor2, *params_x)"
        "lat2 = polynomial_function(ycor2, *params_y)"
     )
      set long py:runresult "long2"
      set lat py:runresult "lat2"
    ]
  ]
  [
    ask patches with [pdistrict != 0 and count turtles-here = 0]
    [
      let my-neighbors neighbors with [pdistrict != 0]
      if my-neighbors != nobody
      [
        set dem-res sum [purchasing] of residences-on my-neighbors / count residences-on my-neighbors 
      ]
    ]
    
    ;identify 10 patches with highest demand, and mark them by blue
    ask max-n-of 10 patches [dem-res][set pcolor blue]
    
    
    ;crate new residences
    create-residences 10 ;the number of new residential buildings
    [
      set initial-capacity 20 ;assume that the capacity of each residence is 20
      set capacity initial-capacity
      move-to one-of patches with [pcolor = blue]
      ask patch-here [set pcolor 0]
      set purchasing round (mean [purchasing] of min-n-of 10 residences [distance myself])
      set rrent round (mean [rrent] of min-n-of 10 residences [distance myself])
      set purchaser-income mean [purchaser-income] of min-n-of 10 residences [distance myself]
      set renter-income mean [renter-income] of min-n-of 10 residences [distance myself]
      set size 0.5 set color green set shape "house"
    ]
    
    ;calculate longitude and latitude
    let long1 []
    let lat1 []
    let xcor1 []
    let ycor1 []
    ask residences with [long != 0 and lat != 0]
    [
      set xcor1 lput xcor xcor1
      set ycor1 lput ycor ycor1
      set long1 lput long long1
      set lat1 lput lat lat1
    ]
    py:set "xcor1" xcor1
    py:set "ycor1" ycor1
    py:Set "long1" long1
    py:set "lat1" lat1  
    ask residences with [long = 0 and lat = 0]
    [
      py:set "xcor2" xcor
      py:Set "ycor2" ycor
      (py:run
        "import numpy as np"
        "from scipy.optimize import curve_fit"
        "import pandas as pd"
        "def polynomial_function(x, a, b, c, d):"
        " return a * x**3 + b * x**2 + c * x + d"
        
        "params_x, _ = curve_fit(polynomial_function, xcor1, long1)"
        "params_y, _ = curve_fit(polynomial_function, ycor1, lat1)"
        "long2 = polynomial_function(xcor2, *params_x)"
        "lat2 = polynomial_function(ycor2, *params_y)"
     )
      set long py:runresult "long2"
      set lat py:runresult "lat2"
    ]
  ]
end



