to employ-model
  ;retiring
  ifelse postpone
  [
    ask people with [age >= 65]
    [
      if status = 3 or status = 2
      [
        set status 4
        set income income / 3
        set wslong 0
        set wslat 0
        ask people with [hhd = [hhd] of myself and relationship = 0] [set flexible flexible + 1]
        ask my-employees [die]
        ask my-shoppings with [loc = 1][die]
        ask my-leisures with [loc = 1][die]
      ]
    ]
  ]
  [
    ask people with [gender = 0 and age >= 55]
    [
      if status = 3 or status = 2
      [
        set status 4
        set income income / 3
        set wslong 0
        set wslat 0
        ask people with [hhd = [hhd] of myself and relationship = 0] [set flexible flexible + 1]
        ask my-employees [die]
        ask my-shoppings with [loc = 1][die]
        ask my-leisures with [loc = 1][die]
      ]
    ]
      
    ask people with [gender = 1 and age >= 60]
    [
      if status = 3 or status = 2
      [
        set status 4
        set income income / 3
        set wslong 0
        set wslat 0
        ask people with [hhd = [hhd] of myself and relationship = 0] [set flexible flexible + 1]
        ask my-employees [die]
        ask my-shoppings with [loc = 1][die]
        ask my-leisures with [loc = 1][die]
      ]
    ]
  ]
  
  ;define unemployment rate
  let umemployment 0.05
  
  ;Select people who are unemployed and employed based on the unemployment rate
  ask people with [status = 3 or status = 2] ;people with status equals 3 or 2 are labours
  [
    ifelse random-float 1 <= umemployment ; if the random number below to the unemployment rate, the person will be umemployed
    [
      if status = 2 [ask one-of people with [hhd = [hhd] of myself and relationship = 1][set flexible flexible + 1]] ;If this person originally had a job, its household's flexible triggers of house moving would increase by 1 ;
      set status 3  ;set the status at 3
    ]
    [set status 2] ; otherwise, set status at 2
  ]
  
  ;behaviors of unemployees
  ask people with [status = 3]
  [
    ask my-employees [die]
    set income 0
    set wslong 0
    set wslat 0
    set current-ws-dis 0
    ask people with [hhd = [hhd] of myself] [set hhd-income sum [income] of people with [hhd = [hhd] of myself]]
    ask my-shoppings with [loc = 1][die]
    ask my-leisures with [loc = 1][die]
  ]


  ;
  ;There are three steps: (1) firms, schools, and shops determine if the required number of employees is greater than the existing number of employees. If yes, some employees need to leave.
  ;(2) Randomly assign work to people without work but with status=2
  
  ask schools with [count in-employee-neighbors > staff] ;some staffs in schools are asked to leave
  [
    ask n-of (count in-employee-neighbors - staff) in-employee-neighbors 
    [
      ask my-employees [die] 
      ask my-shoppings with [loc = 1][die]
      ask my-leisures with [loc = 1][die]
    ]
  ]
  
  ask shops with [count in-employee-neighbors > staff] ;some staffs in shops are asked to leave
  [
    ask n-of (count in-employee-neighbors - staff) in-employee-neighbors [ask my-employees [die] ]
  ]
  
  ;update the number of staffs each firm needed
  let firm-staff count people with [status = 2] - sum [staff] of schools - sum [staff] of shops
  ask firms [set staff round  firm-staff * capacity / sum [capacity] of firms]
  if sum [staff] of firms > firm-staff [ask n-of (sum [staff] of firms - firm-staff) firms with [staff > 1] [set staff staff - 1]]
  if sum [staff] of firms < firm-staff [ask n-of (firm-staff - sum [staff] of firms) firms[set staff staff + 1]]
  
  
  ask firms with [count in-employee-neighbors > staff];some staffs in firmss are asked to leave
  [
    ask n-of (count in-employee-neighbors - staff) in-employee-neighbors 
    [
      ask my-employees [die] 
      ask my-shoppings with [loc = 1][die]
      ask my-leisures with [loc = 1][die]
    ]
  ]
  
  ask people with [status = 2 and count in-employee-neighbors = 0] ;assign work
  [
    let candidate one-of schools with [count in-employee-neighbors < staff] in-radius distance-max
    if candidate = nobody [set candidate one-of shops with [count in-employee-neighbors < staff] in-radius distance-max]
    if candidate = nobody [set candidate one-of firms with [count in-employee-neighbors < staff] in-radius distance-max]
    if candidate = nobody [set candidate one-of schools with [count in-employee-neighbors < staff]]
    if candidate = nobody [set candidate one-of shops with [count in-employee-neighbors < staff]]
    if candidate = nobody [set candidate one-of firms with [count in-employee-neighbors < staff]]
    create-employee-with candidate
    set wslong [long] of candidate
    set wslat [lat] of candidate
    ask one-of people with [hhd = [hhd] of myself and relationship = 1][set flexible flexible + 1]
  ]
  
  print "employ-model finished"
end