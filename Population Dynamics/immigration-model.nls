to immigration-model
  let num-imm 0
  (ifelse 
    year = 2019 [set num-imm round (item 0 Nimm / 1000)]
    year = 2020 [set num-imm round (item 1 Nimm / 1000)]
    year = 2021 [set num-imm round (item 2 Nimm / 1000)]
    year = 2022 [set num-imm round (item 3 Nimm / 1000)]
    year = 2023 [set num-imm round (item 4 Nimm / 1000)]
    year = 2024 [set num-imm round (item 5 Nimm / 1000)]
    year = 2025 [set num-imm round (item 6 Nimm / 1000)]
    year = 2026 [set num-imm round (item 7 Nimm / 1000)]
    year = 2027 [set num-imm round (item 8 Nimm / 1000)]
    year = 2028 [set num-imm round (item 9 Nimm / 1000)]
    year = 2029 [set num-imm round (item 10 Nimm / 1000)]
    [set num-imm round (item 11 Nimm / 1000)]
  ) 
  
  let file-imm (word "Daily Plan/immigration" year "year.csv")
  let file-imm-past (word "immigration" year "year.csv")
  py:set "filename" file-imm-past
  (py:run
    "root_dir = os.getcwd()"
    "for root, dirs, files in os.walk(root_dir):"
    "  for file in files:"
    "    if file == filename:"
    "        file_path = os.path.join(root, file)"
    "        os.remove(file_path)"
  )
  file-open file-imm
  file-print "PID,livelong,livelat,residence,wslong,wslat,wsplace"
  
  
  while [num-imm > 0]
  [
    let candidate one-of people ; Choose any family, and the attributes of the newly moved family are consistent with that of the family
    let new-hhdid max [hhd] of people + 1 ; create a new household id
    ask people with [hhd = [hhd] of candidate] 
    [
      hatch 1 
      [
        set pid (max [pid] of people + 1)
        set hhd new-hhdid
        set livelong 0
        set livelat 0
        ;clear all energy consumption attributes, except coef
        set daytime-temp-air 0
        set night-temp-air 0
        set month-cool 0
        set weekday-hour 0
        set weekend-hour 0
        set fre-cook 0
        set air []
        set bread []
        set induction []
        set rice []
        set pressure []
        set baking []
        set pot []
        set milk []
        set microwave []
        set led []
        
        if status = 1 and age >= 3 [find-a-school] ;assign a school for students
        if status = 2 [find-a-job] ;assign a work place for employees
        file-print (word pid ", " livelong ", " livelat)
      ]
    ]
    let hhder one-of people with [hhd = new-hhdid and relationship = 1]
    ask hhder
    [
      set mandatory 1
      update-relationship new-hhdid hhder
    ]
    set num-imm num-imm - count people with [hhd = [hhd] of candidate] 
  ]
  ;developed social network for immigrants
  if social-network [generate-network]
  file-close
  print "immigration model finished"
end

to find-a-school
  ;Update the probability of each high school, vocational college, and higher education institution
  let school4 [] ;list of school with category = 4
  let prob4 [];weights
  ask schools with [category = 4][set school4 lput who school4 set prob4 lput capacity prob4]
  py:set "school4" school4
  py:set "prob4" prob4
  let school5 [] ;list of school with category = 5
  let prob5 [];weights
  ask schools with [category = 5][set school5 lput who school5 set prob5 lput capacity prob5]
  py:set "school5" school5
  py:set "prob5" prob5
  let school6 [] ;list of school with category = 4
  let prob6 [];weights
  ask schools with [category = 6][set school6 lput who school6 set prob6 lput capacity prob6]
  py:set "school6" school6
  py:set "prob6" prob6
  
  let candidate nobody
  (ifelse
    education = 1 [set candidate one-of schools with [category = 1 and count in-student-neighbors < capacity]]
    education = 2 [set candidate one-of schools with [category = 2 and count in-student-neighbors < capacity]]
    education = 3 [set candidate one-of schools with [category = 3 and count in-student-neighbors < capacity]]
    education = 4
    [
      (py:run
       "result = random.choices (school5, prob5)"
      )
      set candidate one-of schools with [who = item 0 py:runresult "result"]
    ]
    education = 5
    [
      (py:run
       "result = random.choices (school4, prob4)"
      )
      set candidate one-of schools with [who = item 0 py:runresult "result"]
    ]
    education = 6 
    [
      (py:run
       "result = random.choices (school5, prob5)"
      )
      set candidate one-of schools with [who = item 0 py:runresult "result"]
    ]
    ;education = 7 or 8 or 9
    [        
      (py:run
       
       "result = random.choices (school6, prob6)"
      )
      set candidate one-of schools with [who = item 0 py:runresult "result"]
    ])
  create-student-with candidate
  set wslong [long] of candidate
  set wslat [lat] of candidate
end

to find-a-job
  let candidate one-of firms
  create-employee-with candidate
  set wslong [long] of candidate
  set wslat [lat] of candidate
  ask candidate [set staff staff + 1]
end

to Emigration-Model
  let num-emi 0
  (ifelse 
    year = 2019 [set num-emi round (item 0 Nemi / 1000)]
    year = 2020 [set num-emi round (item 1 Nemi / 1000)]
    year = 2021 [set num-emi round (item 2 Nemi / 1000)]
    year = 2022 [set num-emi round (item 3 Nemi / 1000)]
    year = 2023 [set num-emi round (item 4 Nemi / 1000)]
    year = 2024 [set num-emi round (item 5 Nemi / 1000)]
    year = 2025 [set num-emi round (item 6 Nemi / 1000)]
    year = 2026 [set num-emi round (item 7 Nemi / 1000)]
    year = 2027 [set num-emi round (item 8 Nemi / 1000)]
    year = 2028 [set num-emi round (item 9 Nemi / 1000)]
    year = 2029 [set num-emi round (item 10 Nemi / 1000)]
    [set num-emi round (item 11 Nemi / 1000)]
  ) 
  
  let file-emi (word "Daily Plan/emigration" year "year.csv")
  let file-emi-past (word "emigration" year "year.csv")
  py:set "filename" file-emi-past
  (py:run
    "root_dir = os.getcwd()"
    "for root, dirs, files in os.walk(root_dir):"
    "  for file in files:"
    "    if file == filename:"
    "        file_path = os.path.join(root, file)"
    "        os.remove(file_path)"
  )
  file-open file-emi
  file-print "PID" 
  let i num-emi
  while [i > 0]
  [
    let candidate one-of people with [relationship = 1] ;Randomly select a family to move out of the city
    set i i - count people with [hhd = [hhd] of candidate]
    ask people with [hhd = [hhd] of candidate] 
    [
      file-print PID
      die
    ]
  ]
  file-close
  (py:run "subprocess.run(['python', 'Emigration.py'])")
  print "emigration model finished"
end
