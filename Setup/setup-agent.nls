to setup-agent
  setup-map
  setup-residence
  setup-OBs
  setup-CBs
  setup-schools
  setup-shops
  setup-firms
  setup-people
end

to setup-people
  let people-dataset gis:load-dataset "Input data/Population.shp"
  foreach gis:feature-list-of people-dataset
  [
    vector-feature ->
    let pid1 gis:property-value vector-feature "pid"
    let hhd1 gis:property-value vector-feature "hhd"
    let age1 gis:property-value vector-feature "Age"
    let age-group1 gis:property-value vector-feature "Page"
    let gender1 gis:property-value vector-feature  "Pgen"
    let income1  gis:property-value vector-feature "aincome"
    let education1 gis:property-value vector-feature "Pedu"
    let education2 gis:property-value vector-feature "Education"
    let license1 gis:property-value vector-feature "license"
    let number1 gis:property-value vector-feature "number"  
    let status1 gis:property-value vector-feature "status"
    let residence1 gis:property-value vector-feature "residence"
    let hhd-income1 gis:property-value vector-feature "Hhd_income"
    let wsplace gis:property-value vector-feature "ws"
    let ID1 gis:property-value vector-feature "id"
    let traffic1 gis:property-value vector-feature "traffic"
;    let Parking1 gis:property-value vector-feature "Parking"
    let max-distance1 gis:property-value vector-feature "Max"
    
    let cv1 gis:property-value vector-feature "CV"
    let bev1 gis:property-value vector-feature "BEV"
    let phev1 gis:property-value vector-feature "PHEV"
    let fri1 gis:property-value vector-feature "fri"
    let neighbor1 gis:property-value vector-feature "neighbor"
    let adv1 gis:property-value vector-feature "adv"

  set-default-shape people "circle"

    create-people 1 
    [
      set pid pid1
      set hhd hhd1
      set age age1
      set Gender gender1
      set Income income1 / 12
      set License license1
      set number number1
      set education-level education1
      set age-group age-group1
      set status status1
      set hhd-income hhd-income1
      set education education2
      set traffic traffic1
      set distance-max max-distance1
      set residence-size residence1
      if status = 1 and wsplace != "0" [create-student-with one-of schools with [SchID = ID1] set wslong [long] of one-of schools with [SchID = ID1] set wslat [lat] of one-of schools with [SchID = ID1]]
      if status = 2
      [
        (ifelse
          wsplace = "Schools" [create-employee-with one-of schools with [SchID = ID1] set wslong [long] of one-of schools with [SchID = ID1] set wslat [lat] of one-of schools with [SchID = ID1]]
          wsplace = "Shops" [create-employee-with one-of shops with [SID = ID1] set wslong [long] of one-of shops with [SID = ID1] set wslat [lat] of one-of shops with [SID = ID1]]
          ;wsplace = "firm
          [create-employee-with one-of firms with [FID = ID1] set wslong [long] of one-of firms with [FID = ID1] set wslat [lat] of one-of firms with [FID = ID1]]
        )
      ]
;      set cv cv1
;      set phev phev1
;      set bev bev1
;      set adv random 2
;      set friendship-effect random 2
;      set neighbor-effect random 2
;      set W-BEV W-BEV1
;      set W-AV W-AV1
;      set EVF EVF1
    ]
  ]
  
  ;为每个家庭找一个hhder
  let min-hhd min [hhd] of people 
  let max-hhd max [hhd] of people
  while [min-hhd <= max-hhd]
  [
    ifelse count people with [hhd = min-hhd and age >= 18] > 0
    [
      ask one-of people with [hhd = min-hhd and age >= 18]
      [
        set relationship 1
        let my-residence one-of residences with [rid = [residence-size] of myself]
        ifelse hhd-income > [purchasing] of my-residence * 3
        [create-purchase-with my-residence set residence-cost [purchasing] of my-residence * number set livelong [long] of my-residence set livelat [lat] of my-residence]
        [create-rent-with my-residence set residence-cost [rrent] of my-residence * number set livelong [long] of my-residence set livelat [lat] of my-residence]
        set residence-size number
        move-to my-residence
      ]
    ]
    [
      ask one-of people with [hhd = min-hhd]
      [
        set relationship 1
        let my-residence one-of residences with [rid = [residence-size] of myself]
        ifelse hhd-income > [purchasing] of my-residence * 2 
        [create-purchase-with my-residence set residence-cost [purchasing] of my-residence * number set livelong [long] of my-residence set livelat [lat] of my-residence set flexible random T-flexible-purchase]
        [create-rent-with my-residence set residence-cost [rrent] of my-residence * number set livelong [long] of my-residence set livelat [lat] of my-residence]
        set residence-size number
        move-to my-residence
      ]
    ]
    set min-hhd min-hhd + 1
  ]
  ask people 
  [
    if relationship != 1 
    [
      set residence-size 0
      let hhder one-of people with [hhd = [hhd] of myself and relationship = 1]
      move-to hhder
      set livelong [livelong] of hhder
      set livelat [livelat] of hhder
    ]
    set district [pdistrict] of patch-here
    set size 0.5
    set color white
  ]
end

to setup-map
  let Shenzhen-dataset gis:load-dataset "Input data/Beijing.shp"
  gis:set-world-envelope (gis:envelope-of shenzhen-dataset)
  let i 1
  foreach gis:feature-list-of Shenzhen-dataset 
  [
    feature ->
    ask patches gis:intersecting feature 
    [
      set centroid gis:location-of gis:centroid-of feature
      ask patch item 0 centroid item 1 centroid 
      [
        set ID i
      ]
    ]
      set i i + 1
  ]
  gis:set-drawing-color white
  gis:draw shenzhen-dataset 1
  
  gis:apply-coverage shenzhen-dataset "NAME_2" pdistrict
  ask patches
  [
    (ifelse
      pdistrict = "Dongcheng" [set pdistrict 1]
      pdistrict = "Xicheng" [set pdistrict 2]
      pdistrict = "Chaoyang" [set pdistrict 3]
      pdistrict = "Fengtai" [set pdistrict 4]
      pdistrict = "Shijingshan" [set pdistrict 5]
      pdistrict = "Haidian" [set pdistrict 6]
      pdistrict = "Mentougou" [set pdistrict 7]
      pdistrict = "Fangshan" [set pdistrict 8]
      pdistrict = "Tongzhou" [set pdistrict 9]
      pdistrict = "Shunyi" [set pdistrict 10]
      pdistrict = "Changping" [set pdistrict 11]
      pdistrict = "Daxing" [set pdistrict 12]
      pdistrict = "Huairou" [set pdistrict 13]
      pdistrict = "Pinggu" [set pdistrict 14]
      pdistrict = "Miyun" [set pdistrict 15]
      pdistrict = "Yanqing" [set pdistrict 16]
      [set pdistrict 0]
      )
  ]
end

to setup-residence
  let residence-dataset gis:load-dataset "Input data/residence.shp"
  foreach gis:feature-list-of residence-dataset
  [
    vector-feature ->
    let coord-tuple gis:location-of (first (first (gis:vertex-lists-of vector-feature)))
    let price1 gis:property-value vector-feature "price"
    let rent1 gis:property-value vector-feature "rent"
    let rid1 gis:property-value vector-feature "OID_"
    let long1 gis:property-value vector-feature "long"
    let lat1 gis:property-value vector-feature "lat"
    let capacity1 gis:property-value vector-feature "capacity"
    let district1 gis:property-value vector-feature "district"
    let long-coord item 0 coord-tuple
    let lat-coord item 1 coord-tuple
    set-default-shape residences "house"
    
    create-residences 1
    [
      set purchasing price1
      set rid rid1
      set capacity capacity1
      setxy long-coord lat-coord
      set long long1
      set lat lat1
      set rrent rent1
      set initial-capacity capacity 
      set district district1
    ]
  ]
  ;ask residences [set size 0.5 set color green set district [pdistrict] of patch-here]
end

to setup-OBs
  let OB-dataset gis:load-dataset "Input data/OBs.shp"
  foreach gis:feature-list-of OB-dataset
  [
    vector-feature ->
    let coord-tuple gis:location-of (first (first (gis:vertex-lists-of vector-feature)))
    let rent1 gis:property-value vector-feature "price"
    let capacity1 gis:property-value vector-feature "capacity"
    let long1 gis:property-value vector-feature "lng"
    let lat1 gis:property-value vector-feature "lat"
    let OID1 gis:property-value vector-feature "CID"
    let long-coord item 0 coord-tuple
    let lat-coord item 1 coord-tuple
    set-default-shape OBs "house"
    create-obs 1
    [
      set frent rent1
      set capacity capacity1
      set long long1
      set lat lat1
      set OID OID1
      set initial-capacity capacity
      setxy long-coord lat-coord
    ]
  ]
  ask OBs [set size 0.5 set color blue]
end

to setup-CBs
  let CB-dataset gis:load-dataset "Input data/CBs.shp"
  foreach gis:feature-list-of CB-dataset
  [
    vector-feature ->
    let coord-tuple gis:location-of (first (first (gis:vertex-lists-of vector-feature)))
    let rent1 gis:property-value vector-feature "price"
    let capacity1 gis:property-value vector-feature "capacity"
    let long1 gis:property-value vector-feature "lng"
    let lat1 gis:property-value vector-feature "lat"
    let CID1 gis:property-value vector-feature "CID"
    let long-coord item 0 coord-tuple
    let lat-coord item 1 coord-tuple
    set-default-shape CBs "house"
    create-CBs 1
    [
      set Srent rent1
      set capacity capacity1
      set long long1
      set lat lat1
      set CID CID1
      setxy long-coord lat-coord
      set initial-capacity capacity
    ]
  ]
  ask CBs [set size 0.5 set color blue]
end

to setup-firms
  let firm-dataset gis:load-dataset "Input data/firms.shp"
  foreach gis:feature-list-of firm-dataset
  [
    vector-feature ->
    let FID1 gis:property-value vector-feature "FID_"
    let capacity1 gis:property-value vector-feature "capacity"
    let age1 gis:property-value vector-feature "age"
    let location1 gis:property-value vector-feature "location"
    set-default-shape firms "triangle"
    create-firms 1
    [
      set FID FID1
      set capacity capacity1
      set age age1
      let target one-of obs with [OID = location1]
      move-to target
      set long [long] of target
      set lat [lat] of target
      set office-size capacity
      set office-cost office-size * [frent] of target
      set office-cost-next office-cost
      ask target [set capacity capacity - [office-size] of myself]
      create-rent-with target
    ]
  ]
  ask firms [set size 0.5 set color orange]
end

to setup-shops
  let shop-dataset gis:load-dataset "Input data/shops.shp"
  foreach gis:feature-list-of shop-dataset
  [
    vector-feature ->
    let shid1 gis:property-value vector-feature "ShID"
    let capacity1 gis:property-value vector-feature "capacity"
    let location1 gis:property-value vector-feature "location"
    let staff1 gis:property-value vector-feature "staff"
    set-default-shape firms "triangle"
    create-shops 1
    [
      set SID SHID1
      set category random 2 + 1
      set capacity capacity1
      set staff staff1
      let target one-of cbs with [CID = location1]
      move-to target
      set long [long] of target
      set lat [lat] of target
      ask target [set capacity capacity - [capacity] of myself]
      set rent-cost [srent] of target * capacity
      create-rent-with target
    ]
  ]
  ask shops [set size 0.5 set color Magenta]
end

to setup-schools
  let school-dataset gis:load-dataset "Input data/schools.shp"
  foreach gis:feature-list-of school-dataset
  [
    vector-feature ->
    let coord-tuple gis:location-of (first (first (gis:vertex-lists-of vector-feature)))
    let long1 gis:property-value vector-feature "Lng"
    let lat1 gis:property-value vector-feature "Lat"
    let SchID1 gis:property-value vector-feature "ScID"
    let Category1 gis:property-value vector-feature "Category"
    let capacity1 gis:property-value vector-feature "Capacity"
    let staff1 gis:property-value vector-feature "Staff"
    let long-coord item 0 coord-tuple
    let lat-coord item 1 coord-tuple
    set-default-shape firms "triangle"
    
    create-schools 1
    [
      set SchID SchID1
      setxy long-coord lat-coord
      set long long1
      set lat lat1
      set category category1
      set capacity capacity1
      set staff staff1
      set district [pdistrict] of patch-here
    ]
  ]
  
  ask schools [set size 0.5 set color yellow]
end

to adjust
  
  let observed (list 709 1106 3451 2019 568 3132 393 1313 1840 1324 2269 1994 441 457 528 346)
  
  ask residences
  [
    if count people with [district = [district] of myself] < (item (district - 1) observed)[set status 1]
  ]
  
  let i min [who] of people
  while [i <= max [who] of people]
  [
    if [relationship] of person i = 1
    [
      print i
      let district1 [district] of person i 
      if count people with [district = district1] > (item (district1 - 1) observed * 1.02)
      [
        ask person i
        [
          let target min-one-of residences with [capacity > [number] of myself and status = 1][distance myself]
          if target != nobody
          [
            ask my-purchases [die] ask my-rents [die]
            create-purchase-with target
            ask people with [hhd = [hhd] of myself]
            [
              set livelong [long] of target
              set livelat [lat] of target
              move-to target
              set district [pdistrict] of patch-here
            ]
            ask residences [set capacity initial-capacity - sum [residence-size] of in-purchase-neighbors - sum [residence-size] of in-rent-neighbors]
          ]
        ]
        ask residences
        [
          set status 0
          if count people with [district = [district] of myself] < (item (district - 1) observed)[set status 1]
        ]
      ]
    ]
    set i i + 1
  ]
  ask people with [relationship = 1]
  [
    ifelse count in-rent-neighbors = 1 [set livelong [rid] of one-of in-rent-neighbors][set livelong [rid] of one-of in-purchase-neighbors]
    ask people with [hhd = [hhd] of myself][set livelong [livelong] of myself]
  ]
end
