to-report predict-bathing-appliances
  py:set "gender" gender
  py:set "age" age-group
  py:Set "education" education-level
  py:Set "income" income-group
  py:set "status" status
  py:Set "num_family" number
  py:set "num_child" count people with [hhd = [hhd] of myself and age < 18]
  py:set "num_old" count people with [hhd = [hhd] of myself and status = 4]
  py:set "household_income" hhd-income-group
  (py:run
    "import numpy as np"
    "from sklearn.ensemble import RandomForestClassifier"
    "seeds = 1"
    "trees = 100"
    "name1_data = pd.read_excel('Water Energy Consumption/bathing appliances.xlsx')"
    "features = name1_data[['gender', 'age', 'permonth_income', 'education', 'status','family_member', 'minor', 'retired','hhd_income']]"
    "second_level_labels = name1_data[['Electric Footbath','Water heater model','showerhead','thermostatic function','Faucet type']]"
    "rf_second_level = RandomForestClassifier(n_estimators=trees, random_state=seeds)"
    "rf_second_level.fit(features, second_level_labels)"
    "new_data = pd.DataFrame([[gender, age, income, education, status, num_family, num_child, num_old, household_income]],columns=features.columns)"
    "Y = rf_second_level.predict(new_data)"
    "ElectricFootbath = Y[0, 0]"
    "Waterheater = Y[0, 1]"
    "showerhead = Y[0, 2]"
    "thermostatic = Y[0, 3]"
    "Faucet = Y[0, 4]"
  )
  let Electric-Footbath1 py:runresult "ElectricFootbath"       
  let Water-heater1 py:runresult "Waterheater"            
  let showerhead1 py:runresult "showerhead"  
  let thermostatic1 py:runresult "thermostatic"         
  let Faucet1 py:runresult "Faucet" 
  let resultlist (list Electric-Footbath1 Water-heater1 showerhead1 thermostatic1 Faucet1)
  report resultlist
end